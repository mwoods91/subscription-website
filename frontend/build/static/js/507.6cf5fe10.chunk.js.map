{"version":3,"file":"static/js/507.6cf5fe10.chunk.js","mappings":"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","sources":["components/Snackbar.js","pages/AuthenticatedPages/Account/Password.js","pages/AuthenticatedPages/Account/components/Page.js"],"sourcesContent":["/**\r\n * @author  Mark Woods\r\n */\r\n\r\nimport React, { useState } from 'react';\r\n// material-ui\r\n\r\nimport { Alert, Button, Slide } from '@mui/material';\r\n\r\nimport MuiSnackbar from '@mui/material/Snackbar';\r\n\r\n// project-import\r\nimport IconButton from '../components/IconButton';\r\n\r\n// assets\r\nimport { CloseOutlined } from '@ant-design/icons';\r\n\r\nconst anchorOrigin = {\r\n  vertical: 'top',\r\n  horizontal: 'center'\r\n};\r\n\r\nconst SnackbarMessage = (props) => {\r\n  const [state] = useState({ Transition: Slide });\r\n  const { snackbar, setSnackBar } = props;\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnackBar({\r\n      ...snackbar,\r\n      open: false\r\n    });\r\n  };\r\n  return (\r\n    <MuiSnackbar\r\n      sx={{ position: 'fixed', mt: 5 }}\r\n      TransitionComponent={state.Transition}\r\n      anchorOrigin={anchorOrigin}\r\n      open={snackbar.open}\r\n      autoHideDuration={4000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert\r\n        variant={snackbar.alert.variant}\r\n        color={snackbar.alert.color}\r\n        action={\r\n          <>\r\n            {snackbar.actionButton !== false && (\r\n              <Button color={snackbar.alert.color} size=\"small\" onClick={handleClose}>\r\n                X\r\n              </Button>\r\n            )}\r\n            {snackbar.close !== false && (\r\n              <IconButton\r\n                sx={{ mt: 0.25 }}\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                variant=\"contained\"\r\n                color={snackbar.alert.color}\r\n                onClick={handleClose}\r\n              >\r\n                <CloseOutlined />\r\n              </IconButton>\r\n            )}\r\n          </>\r\n        }\r\n        sx={{\r\n          ...(snackbar.alert.variant === 'outlined' && {\r\n            bgcolor: 'grey.0'\r\n          })\r\n        }}\r\n      >\r\n        {snackbar.message}\r\n      </Alert>\r\n    </MuiSnackbar>\r\n  );\r\n};\r\n\r\nexport default SnackbarMessage;\r\n","import React, { useState } from 'react';\r\nimport Page from './components/Page';\r\n//material ui\r\nimport {\r\n  Grid,\r\n  Stack,\r\n  TextField,\r\n  InputAdornment,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  FormHelperText\r\n} from '@mui/material';\r\n\r\n//3rd party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\n\r\n//assets\r\nimport { CheckOutlined, EyeTwoTone, EyeInvisibleTwoTone, CloseOutlined } from '@ant-design/icons';\r\n\r\n//project imports\r\nimport MainCard from '../../../components/MainCard';\r\nimport SnackbarMessage from '../../../components/Snackbar';\r\n\r\nconst PasswordReset = () => {\r\n  function isLowercaseChar(value) {\r\n    return new RegExp('^(?=.*[a-z]).+$').test(value);\r\n  }\r\n\r\n  function isUppercaseChar(value) {\r\n    return new RegExp('^(?=.*[A-Z]).+$').test(value);\r\n  }\r\n\r\n  function isNumber(value) {\r\n    return new RegExp('^(?=.*[0-9]).+$').test(value);\r\n  }\r\n\r\n  const [snackbar, setSnackBar] = useState({\r\n    open: false,\r\n    close: true,\r\n    actionButton: false,\r\n    alert: { color: 'primary', variant: 'filled' },\r\n    message: '',\r\n    vertical: 'top',\r\n    horizontal: 'center'\r\n  });\r\n  const [showOldPassword, setShowOldPassword] = useState(false);\r\n  const [showNewPassword, setShowNewPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const clickShowOldPassword = () => {\r\n    setShowOldPassword(!showOldPassword);\r\n  };\r\n\r\n  const clickShowNewPassword = () => {\r\n    setShowNewPassword(!showNewPassword);\r\n  };\r\n  const clickShowConfirmPassword = () => {\r\n    setShowConfirmPassword(!showConfirmPassword);\r\n  };\r\n\r\n  const initialValues = {\r\n    oldPassword: 'Hello',\r\n    newPassword: '',\r\n    confirmNewPassword: ''\r\n  };\r\n\r\n  const passwordResetSchema = Yup.object().shape({\r\n    oldPassword: Yup.string().required('You must enter your old password'),\r\n    newPassword: Yup.string()\r\n      .required('Please enter your new password')\r\n      .matches(\r\n        /^.*(?=.*\\d)((?=.*[A-Z]){1})((?=.*[a-z]){1}).*$/,\r\n        'Password must contain at least one uppercase, one lower case and one number'\r\n      ),\r\n    confirmNewPassword: Yup.string()\r\n      .required('Please confirm you password')\r\n      .oneOf([Yup.ref('newPassword'), null], 'Passwords do not match!')\r\n  });\r\n\r\n  const submitForm = (e, values) => {\r\n    try {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      setSnackBar({\r\n        open: true,\r\n        message: 'Something went wrong',\r\n        variant: 'alert',\r\n        alert: {\r\n          color: 'success'\r\n        }\r\n      });\r\n    } catch {\r\n      setSnackBar({\r\n        open: true,\r\n        message: 'Something went wrong',\r\n        variant: 'alert',\r\n        alert: {\r\n          color: 'error'\r\n        },\r\n        close: false\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Page>\r\n        <Box>\r\n          <Formik initialValues={initialValues} validationSchema={passwordResetSchema} onSubmit={submitForm}>\r\n            {({ errors, handleBlur, handleChange, handleSubmit, touched, values, resetForm }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                    <MainCard title=\"Reset Password\">\r\n                      <Grid container spacing={1}>\r\n                        <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                          <Stack sx={{ mt: 2 }} spacing={1}>\r\n                            <TextField\r\n                              InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment sx={{ cursor: 'pointer' }} onClick={clickShowOldPassword} position=\"end\">\r\n                                    {showOldPassword ? (\r\n                                      <EyeTwoTone twoToneColor=\"#437CBF\" />\r\n                                    ) : (\r\n                                      <EyeInvisibleTwoTone twoToneColor=\"#437CBF\" />\r\n                                    )}\r\n                                  </InputAdornment>\r\n                                )\r\n                              }}\r\n                              InputLabelProps={{ shrink: true }}\r\n                              variant=\"outlined\"\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              label=\"Old Password\"\r\n                              id=\"oldPassword\"\r\n                              value={values.oldPassword}\r\n                              type={showOldPassword ? 'text' : 'password'}\r\n                              name=\"oldPassword\"\r\n                              fullWidth\r\n                            />\r\n                            {touched.oldPassword && errors.oldPassword && (\r\n                              <FormHelperText error id=\"confirm-password\">\r\n                                {errors.oldPassword}\r\n                              </FormHelperText>\r\n                            )}\r\n                          </Stack>\r\n                          <Stack sx={{ mt: 2 }} spacing={1}>\r\n                            <TextField\r\n                              InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment sx={{ cursor: 'pointer' }} onClick={clickShowNewPassword} position=\"end\">\r\n                                    {showNewPassword ? (\r\n                                      <EyeTwoTone twoToneColor=\"#437CBF\" />\r\n                                    ) : (\r\n                                      <EyeInvisibleTwoTone twoToneColor=\"#437CBF\" />\r\n                                    )}\r\n                                  </InputAdornment>\r\n                                )\r\n                              }}\r\n                              InputLabelProps={{ shrink: true }}\r\n                              variant=\"outlined\"\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              label=\"New Password\"\r\n                              value={values.newPassword}\r\n                              id=\"new-password\"\r\n                              type={showNewPassword ? 'text' : 'password'}\r\n                              name=\"newPassword\"\r\n                              fullWidth\r\n                            />\r\n                            {touched.newPassword && errors.newPassword && (\r\n                              <FormHelperText error id=\"confirm-password\">\r\n                                {errors.newPassword}\r\n                              </FormHelperText>\r\n                            )}\r\n                          </Stack>\r\n                          <Stack sx={{ mt: 2 }} spacing={1}>\r\n                            <TextField\r\n                              InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment sx={{ cursor: 'pointer' }} onClick={clickShowConfirmPassword} position=\"end\">\r\n                                    {showConfirmPassword ? (\r\n                                      <EyeTwoTone twoToneColor=\"#437CBF\" />\r\n                                    ) : (\r\n                                      <EyeInvisibleTwoTone twoToneColor=\"#437CBF\" />\r\n                                    )}\r\n                                  </InputAdornment>\r\n                                )\r\n                              }}\r\n                              InputLabelProps={{ shrink: true }}\r\n                              variant=\"outlined\"\r\n                              onChange={handleChange}\r\n                              onBlur={handleBlur}\r\n                              value={values.confirmNewPassword}\r\n                              label=\"Confirm New Password\"\r\n                              id=\"confirmNewPassword\"\r\n                              type={showConfirmPassword ? 'text' : 'password'}\r\n                              name=\"confirmNewPassword\"\r\n                              fullWidth\r\n                            />\r\n                            {touched.confirmNewPassword && errors.confirmNewPassword && (\r\n                              <FormHelperText error id=\"confirm-password\">\r\n                                {errors.confirmNewPassword}\r\n                              </FormHelperText>\r\n                            )}\r\n                          </Stack>\r\n                          <SnackbarMessage snackbar={snackbar} setSnackBar={setSnackBar} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                          <Box sx={{ p: { xs: 0, sm: 2, md: 1.5, lg: 3 } }}>\r\n                            <Typography variant=\"h5\">Criteria:</Typography>\r\n                            <List sx={{ p: 0, mt: 0 }}>\r\n                              <ListItem divider>\r\n                                <ListItemIcon sx={{ color: isLowercaseChar(values.newPassword) ? 'success.main' : 'inherit' }}>\r\n                                  {isLowercaseChar(values.newPassword) ? <CheckOutlined /> : <CloseOutlined />}\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"At least 1 lower letter (a-z)\" />\r\n                              </ListItem>\r\n                              <ListItem divider>\r\n                                <ListItemIcon sx={{ color: isUppercaseChar(values.newPassword) ? 'success.main' : 'inherit' }}>\r\n                                  {isUppercaseChar(values.newPassword) ? <CheckOutlined /> : <CloseOutlined />}\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"At least 1 uppercase letter (A-Z)\" />\r\n                              </ListItem>\r\n                              <ListItem divider>\r\n                                <ListItemIcon sx={{ color: isNumber(values.newPassword) ? 'success.main' : 'inherit' }}>\r\n                                  {isNumber(values.newPassword) ? <CheckOutlined /> : <CloseOutlined />}\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"At least 1 number (0-9)\" />\r\n                              </ListItem>\r\n                            </List>\r\n                          </Box>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                          <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\" spacing={2}>\r\n                            <Button type=\"submit\" variant=\"outlined\" color=\"primary\">\r\n                              Reset\r\n                            </Button>\r\n                            <Button type=\"submit\" variant=\"contained\">\r\n                              Update Password\r\n                            </Button>\r\n                          </Stack>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </MainCard>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </Page>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PasswordReset;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Card, List, ListItem, Grid, Typography, Container } from '@mui/material';\r\n\r\nconst pages = [\r\n  {\r\n    id: 'general',\r\n    href: '/my-account/personal',\r\n    title: 'Personal'\r\n  },\r\n  {\r\n    id: 'security',\r\n    href: '/my-account/password-reset',\r\n    title: 'Password-Reset'\r\n  },\r\n  {\r\n    id: 'preferences',\r\n    href: '/my-account/preferences',\r\n    title: 'Preferences'\r\n  }\r\n  // {\r\n  //   id: 'billing',\r\n  //   href: '/account-billing',\r\n  //   title: 'Billing Information'\r\n  // }\r\n];\r\n\r\nconst Page = ({ children }) => {\r\n  const [activeLink, setActiveLink] = useState('');\r\n  useEffect(() => {\r\n    setActiveLink(window && window.location ? window.location.pathname : '');\r\n  }, []);\r\n\r\n  const theme = useTheme();\r\n  return (\r\n    <Box>\r\n      <Container>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} md={3}>\r\n            <Card sx={{ boxShadow: 3 }}>\r\n              <List\r\n                disablePadding\r\n                sx={{\r\n                  display: { xs: 'inline-flex', md: 'flex' },\r\n                  flexDirection: { xs: 'row', md: 'column' },\r\n                  overflow: 'auto',\r\n                  flexWrap: 'nowrap',\r\n                  width: '100%',\r\n                  paddingY: { xs: 3, md: 4 },\r\n                  paddingX: { xs: 2, md: 0 }\r\n                }}\r\n              >\r\n                {pages.map((item) => (\r\n                  <ListItem\r\n                    key={item.id}\r\n                    component={'a'}\r\n                    href={item.href}\r\n                    disableGutters\r\n                    sx={{\r\n                      marginRight: { xs: 2, md: 0 },\r\n                      flex: 0,\r\n                      paddingX: { xs: 0, md: 3 },\r\n                      borderLeft: {\r\n                        xs: 'none',\r\n                        md: '4px solid transparent'\r\n                      },\r\n                      borderLeftColor: {\r\n                        md: activeLink === item.href ? theme.palette.primary.main : 'transparent'\r\n                      }\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"subtitle1\" noWrap color={activeLink === item.href ? 'primary' : 'text.secondary'}>\r\n                      {item.title}\r\n                    </Typography>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} md={9}>\r\n            <Card sx={{ boxShadow: 1, padding: 2 }}>{children}</Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nPage.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Page;\r\n"],"names":["anchorOrigin","vertical","horizontal","props","useState","Transition","Slide","state","snackbar","setSnackBar","handleClose","event","reason","open","sx","position","mt","TransitionComponent","autoHideDuration","onClose","Alert","variant","alert","color","action","actionButton","Button","size","onClick","close","IconButton","CloseOutlined","bgcolor","message","isLowercaseChar","value","RegExp","test","isUppercaseChar","isNumber","showOldPassword","setShowOldPassword","showNewPassword","setShowNewPassword","showConfirmPassword","setShowConfirmPassword","clickShowOldPassword","clickShowNewPassword","clickShowConfirmPassword","passwordResetSchema","Yup","shape","oldPassword","required","newPassword","matches","confirmNewPassword","oneOf","Page","Box","initialValues","validationSchema","onSubmit","e","values","errors","handleBlur","handleChange","handleSubmit","touched","resetForm","Grid","container","spacing","item","xs","sm","md","lg","MainCard","title","Stack","TextField","InputProps","endAdornment","InputAdornment","cursor","EyeTwoTone","twoToneColor","EyeInvisibleTwoTone","InputLabelProps","shrink","onChange","onBlur","label","id","type","name","fullWidth","FormHelperText","error","p","Typography","List","ListItem","divider","ListItemIcon","CheckOutlined","ListItemText","primary","direction","justifyContent","alignItems","pages","href","children","activeLink","setActiveLink","useEffect","window","location","pathname","theme","useTheme","boxShadow","disablePadding","display","flexDirection","overflow","flexWrap","width","paddingY","paddingX","map","component","disableGutters","marginRight","flex","borderLeft","borderLeftColor","palette","main","noWrap","padding"],"sourceRoot":""}